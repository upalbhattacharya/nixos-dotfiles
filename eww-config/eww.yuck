(defpoll time :interval "1s"
              :initial "initial-value"  ; optional, defaults to poll at startup
              :run-while time-visible   ; optional, defaults to 'true'
  `date +%H:%M:%S`)

(defpoll date :interval "1s"
              :initial "initial-value"  ; optional, defaults to poll at startup
              :run-while time-visible   ; optional, defaults to 'true'
  `date +%Y-%m%-d`)

(defwindow bar
           :monitor "HDMI-A-1"
           :geometry (geometry :x "0px"
                               :y "0px"
                               :height "24px"
                               :width "150%"
                               :anchor "top center")
           :namespace "eww-bar"
           :stacking "fg"
           :exclusive true
           (bar))

(defwidget bar []
    (box :class "full-bar"
         :orientation "horizontal"
         :halign "fill"
         :width "100%"
        (left-segment)
        (center-segment)
        (right-segment)))

(defwidget left-segment []
           (box :class "left-segment"
                :orientation "horizontal"
                :space-evenly false
                :valign "center"
                :halign "start"
                (metric :label "ï¡š"
                :value {EWW_RAM.used_mem_perc}
                :onchange "")
                (metric :label "ðŸ’¾"
                :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}
                :onchange "")
                (date-widget)))

(defwidget center-segment []
           (box :class "left-segment"
                :orientation "horizontal"
                :space-evenly false
                :valign "center"
                :halign "center"
                (date-widget)))

(defwidget right-segment []
           (box :class "left-segment"
                :orientation "horizontal"
                :space-evenly false
                :valign "center"
                :halign "end"
                (time-widget)))
                      
(defwidget time-widget []
           (box :class "time-widget"
                :valign "center"
                :orientation "horizontal"
                (label :text time)))

(defwidget date-widget []
           (box :class "date-widget"
                :valign "center"
                :orientation "horizontal"
                (label :text date)))

(defwidget metric [label value onchange]
  (box :orientation "h"
       :class "metric"
       :space-evenly false
    (box :class "label" label)
    (scale :min 0
           :max 101
           :active {onchange != ""}
           :value value
           :onchange onchange)))